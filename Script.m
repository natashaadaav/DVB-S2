clc; clear; close all;
%% Техническое задание
% Модуляция 32APSK
% Позиционность модуляции
M = 32;
N_gr = 2;
% Процент N_in от используемой в модели размерности BBFRAME
N_proc = 50+10*fix(N_gr/5);
% Частота дискретизации сигнала на выходе Raiced Cosine Transmit Filter
SampleRate = 25 * 1e6; 

L = mod(N_gr-1, 5)+7; 
N_rolloff = mod(N_gr-1, 3)+1; 

roll_off = 0.25; % используется в Raised Cosine Filter
% Скорость кода (LDPC)
R_LDPC = 4/5;
% Некодированный блок БЧХ кода
K_BCH = 51648; % используется в блоке Pad, BCH Encoder
% Кодированный блок БЧХ кода
N_BCH = 51840; % используется в блоке BCH Encoder
% Некодированный блок LDPC
K_LDPC = 51840;
% Корректирующая способность БЧХ кода
t = 12;
% Кодированный блок LDPC кода
n_LDPC = 64800;

% Очищение избыточных переменных из рабочей области:
clear K_LDPC; clear L; clear Ngr; clear n_LDPC; clear N_rolloff; clear t
%% Параметры MODE ADAPTATION
% Входная последовательность:
BBHEADER = 80;
BBFRAME = K_BCH;
PADDING = BBFRAME * (1-N_proc/100);
DFL = BBFRAME - BBHEADER - PADDING;
N_in = BBHEADER + DFL;
% Очищение избыточных переменных из рабочей области:
clear BBHEADER; clear BBFRAME; clear PADDING; clear DFL
% Шаг дискретизации:
N_out = 103680;
Dt = 1/(SampleRate*(N_in/N_out));

% Очищение избыточных переменных из рабочей области:
clear SampleRate; clear N_out; clear N_proc

%% FEC ENCODING
% Порождающий полином с корректирующей способностью t = 12:
BCHGeneratorPoly = [1 0 1 0 0 1 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 1 0 ...
    1 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 1 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 ...
    0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 1 0 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 ...
    0 1 1 0 0 0 1 1 0 1 1 1 0 0 0 0 1 1 0 1 0 1 0 0 0 0 1 0 0 0 1 0 0 ...
    0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 1 1 0 0 0 0 1 0 1 1 1 1 1 ...
    0 1 1 1 0 1 1 0 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 1 1 1 1 0 0 ...
    1 1 1]; % используется в BCH Encoder
% Корректирующий полином для нормального FECFRAME:
BCHPrimitivePoly = [1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1];
% Проверочная разреженная матрица
H = dvbs2ldpc(R_LDPC); % используется в LDPC Encoder
% Количество строк
Numofrows = 12960; % используется в интерливере
% Количество столбцов
Numofcols = 5; % используется в интерливере

% Очищение избыточных переменных из рабочей области:
clear R_LDPC
%% MAPPING
NMOD = log2(M); % используется в Bit to integer Converter
% Значение амплитуды, при котором достигается режим насыщения
Xnas = 0.9882;
% Значение максмальной амплитуды при усилении 4.86
Xmax = 3;
% Коэффициент усиления для работы на точке близкой к режиму насыщения
grGain = 4.86*Xnas/Xmax;
% Максимальная мощность (радиус внешнего кольца):
P_c = 1*grGain;
y1 = 2.72;
y2 = 4.87;
% Большая окружность
R3 = P_c;
% Малая окружность
R1 = R3/y2;
% Средняя окружность
R2 = y1 * R1;

apsk32 = [R2*exp(2*pi*1i*1/12+1i*pi/12)...%0  используется в QAM-модуляторе
    R2*exp(2*pi*1i*0/12+1i*pi/12)...%1
    R3*exp(2*pi*1i*1/16)...%2
    R3*exp(2*pi*1i*0/16)...%3
    R2*exp(2*pi*1i*4/12+1i*pi/12)...%4
    R2*exp(2*pi*1i*5/12+1i*pi/12)...%5
    R3*exp(2*pi*1i*6/16)...%6
    R3*exp(2*pi*1i*7/16)...%7
    R2*exp(2*pi*1i*10/12+1i*pi/12)...%8
    R2*exp(2*pi*1i*11/12+1i*pi/12)...%9
    R3*exp(2*pi*1i*14/16)...%10
    R3*exp(2*pi*1i*15/16)...%11
    R2*exp(2*pi*1i*7/12+1i*pi/12)...%12
    R2*exp(2*pi*1i*6/12+1i*pi/12)...%13
    R3*exp(2*pi*1i*9/16)...%14
    R3*exp(2*pi*1i*8/16)...%15
    R2*exp(2*pi*1i*2/12+1i*pi/12)...%16
    R1*exp(2*pi*1i*0/4+1i*pi/4)...%17
    R3*exp(2*pi*1i*3/16)...%18
    R3*exp(2*pi*1i*2/16)...%19
    R2*exp(2*pi*1i*3/12+1i*pi/12)...%20
    R1*exp(2*pi*1i*1/4+1i*pi/4)...%21
    R3*exp(2*pi*1i*4/16)...%22
    R3*exp(2*pi*1i*5/16)...%23
    R2*exp(2*pi*1i*9/12+1i*pi/12)...%24
    R1*exp(2*pi*1i*3/4+1i*pi/4)...%25
    R3*exp(2*pi*1i*12/16)...%26
    R3*exp(2*pi*1i*13/16)...%27
    R2*exp(2*pi*1i*8/12+1i*pi/12)...%28
    R1*exp(2*pi*1i*2/4+1i*pi/4)...%29
    R3*exp(2*pi*1i*11/16)...%30
    R3*exp(2*pi*1i*10/16)...%31
    ];

% Очищение избыточных переменных из рабочей области:
clear M; clear grGain; clear Xnas; clear Xmax; clear P_c; clear y1
clear y2; clear R1; clear R2; clear R3

%% NA - Memoryless Nonlinearity (Нелинейные искажения)
% Параметры искажений типа амплитуда-амплитуда (AM/AM)
a_m = 1.9638;
b_m = 0.9945;
AM_AM = [a_m b_m];

% Параметры искажений типа амплитуда-фаза (AM/PM)
a_f = 2.5293;
b_f = 2.8168;
AM_PM = [a_f b_f];

% Очищение избыточных переменных из рабочей области:
clear a_m; clear b_m; clear a_f; clear b_f

%% Точность и достоверность результатов моделирования
% Квантиль гауссовского закона распределения
Tphi = 1.96;
% Достаточная относительная точность:
epsOD = 0.25;
% Вероятность:
p = 1e-5;
% Объем выборки:
N = (1-p)*(Tphi^2)/(p*epsOD^2);
% Время моделирования:
Tmod = roundn(Dt*N,-1);

% Очищение избыточных переменных из рабочей области:
clear Tphi; clear epsOD; clear p; clear N

%% SNR
% Значение SNR (при котором BER вырождается в прямую)
SNR = 10;
% Значение мощности сигнала на входе канала с АБГШ
P_SNR1 = 0.1993;
P_SNR2 = 0.4674;
% Вектор значений SNR
SNRrange3 = [0 2 4 6 8 10 12 12.5 12.8 13 13.2 13.4 13.5 13.6 13.7 13.73 16 18 20 22 24 26 28 30];
SNRrange4 = [0 2 4 6 8 10 12 12.5 13 13.2 13.4 13.6 13.63 16 18 20 24 26 28 30];

%% Сохранение параметров инициализации модели
save('init','AM_AM','AM_PM','apsk32','BCHGeneratorPoly',...
    'BCHPrimitivePoly','Dt','H','K_BCH','N_BCH','N_in','NMOD',...
    'Numofcols','Numofrows','roll_off','SNR','SNRrange3','SNRrange4','Tmod')

%% Модерилирование:
% Оценка векторов предыскажений сигнала по амплитуде и фазе без смещения
% рабочей точки
[Poly_ampl,Poly_phase] = step1func(1);
% Внесение предискажений в модель:
[BER3, EVM3] = step2func(1);
% Построение полученных зависимостей:
graphfunc(1);
% Оценка векторов предыскажений сигнала по амплитуде и фазе со смещением
% рабочей точки на 10%
clear Poly_ampl; clear Poly_phase;
[Poly_ampl,Poly_phase] = step1func(0.9);
% Внесение предискажений в модель:
[BER4, EVM4] = step2func(0.9);
% Построение полученных зависимостей:
graphfunc(0.9);
% Построение итоговых графиков:
graphfunc(2);


